SESSION 5: FORM VALIDATION, BOOTSTRAP AND CSS 
1. Apply the client validation in the form created in the above exercise 4 of 
session 4, along with server-side validation. 
2. Write a programme to bind form objects with entity bean in Spring MVC. 
3. Configure Bootstrap in Spring MVC and use default styling classes in the 
form and view created in the above exercises. 
4. Apply custom Styling to your pages in Spring MVC. 
*********************************************************************************

Step 1: Apply Client and Server-Side Validation
Client-Side Validation
For client-side validation, we can use HTML5 validation attributes or JavaScript.

HTML5 Validation:

html
Copy code
<form id="yourForm" action="/submitForm" method="post">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" class="form-control" id="name" name="name" required minlength="3">
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

Server-Side Validation
Server-side validation can be done using JSR-303/JSR-380 annotations.

Entity Class with Annotations:

java
Copy code
import javax.validation.constraints.Email;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

public class User {
    @NotNull
    @Size(min=3, message="Name should have at least 3 characters")
    private String name;

    @NotNull
    @Email(message="Email should be valid")
    private String email;

    // getters and setters
}

Controller:

java
Copy code
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import javax.validation.Valid;

@Controller
public class UserController {
    @GetMapping("/form")
    public String showForm(Model model) {
        model.addAttribute("user", new User());
        return "form";
    }

    @PostMapping("/submitForm")
    public String submitForm(@Valid @ModelAttribute("user") User user, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "form";
        }
        // process the user data
        return "result";
    }
}
************************************************************************
Step 2: Bind Form Objects with Entity Bean
This step is already covered in the above code where the User form object is bound to the entity bean in the submitForm method of UserController.
******************************************************************************
Step 3: Configure Bootstrap in Spring MVC
To configure Bootstrap, you need to add the Bootstrap CSS and JS files to your project.

Add Bootstrap to your src/main/resources/static folder:

Download Bootstrap from the official site or use a CDN.
HTML Form with Bootstrap:

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <title>Form</title>
</head>
<body>
    <div class="container">
        <h2>User Form</h2>
        <form id="yourForm" action="/submitForm" method="post" th:object="${user}">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" th:field="*{name}" required minlength="3">
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" class="form-control" id="email" th:field="*{email}" required>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
****************************************************************************
Step 4: Apply Custom Styling
Create a custom CSS file and include it in your HTML.

Create styles.css in src/main/resources/static/css folder:

css
Copy code
body {
    background-color: #f8f9fa;
}

h2 {
    color: #007bff;
}

.form-control {
    border-radius: 0;
}
Include Custom CSS:

html
Copy code
<link href="/css/styles.css" rel="stylesheet">
Complete HTML:

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">
    <title>Form</title>
</head>
<body>
    <div class="container">
        <h2>User Form</h2>
        <form id="yourForm" action="/submitForm" method="post" th:object="${user}">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" th:field="*{name}" required minlength="3">
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" class="form-control" id="email" th:field="*{email}" required>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>