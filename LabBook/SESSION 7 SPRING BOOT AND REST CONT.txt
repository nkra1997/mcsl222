SESSION 7: SPRING BOOT AND REST CONTROLLER 
1. Create a Spring Boot application using Spring Initializer. Add the following 
dependencies manually: 
a. Spring MVC 
b. Hibernate 
c. JPA 
d. Thymeleaf 
e. DevTool 
f. Actuator 
g. MySQL/MSSQL/Oracle/MongoDB (as per your choice) driver. 
2. Configure Database settings through the property file in Spring Boot. 
3. Create JPA Repositories for all entities used in the Student Admission 
lifecycle.
4. Create Rest Controller to fetch Student Information using JPA Repository; 
the response should display in JSON format. 
************************************************
1. Create a Spring Boot Application using Spring Initializr
We'll start by creating a Spring Boot application using Spring Initializr and manually adding the dependencies.

Steps:
1-Visit Spring Initializr.

2-Configure the project with the following options:

Project: Maven Project
Language: Java
Spring Boot: 2.7.0 (or the latest stable version)
Group: com.example
Artifact: student-admission
Name: student-admission
Description: Student Admission Application
Package Name: com.example.studentadmission
Packaging: Jar
Java: 11 (or your preferred version)

3-Add the following dependencies:

Spring Web (for Spring MVC)
Spring Data JPA (for JPA)
Thymeleaf
Spring Boot DevTools
Spring Boot Actuator
MySQL Driver (or another database driver based on your choice)
4-Generate the project and unzip it.
*****************************************
2. Configure Database Settings through the Property File in Spring Boot
Open src/main/resources/application.properties and add the following configurations for MySQL:

properties
Copy code
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/studentdb
spring.datasource.username=root
spring.datasource.password=rootpassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
******************************************
3. Create JPA Repositories for all Entities used in the Student Admission Lifecycle
Create an Entity Class
java
Copy code
package com.example.studentadmission.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String email;

    // getters and setters
}
Create a Repository Interface
java
Copy code
package com.example.studentadmission.repository;

import com.example.studentadmission.entity.Student;
import org.springframework.data.jpa.repository.JpaRepository;

public interface StudentRepository extends JpaRepository<Student, Long> {
}
**********************************
4. Create Rest Controller to Fetch Student Information Using JPA Repository
Create a Rest Controller
java
Copy code
package com.example.studentadmission.controller;

import com.example.studentadmission.entity.Student;
import com.example.studentadmission.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class StudentController {

    @Autowired
    private StudentRepository studentRepository;

    @GetMapping("/students")
    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    @GetMapping("/students/{id}")
    public Student getStudentById(@PathVariable Long id) {
        return studentRepository.findById(id).orElse(null);
    }
}